apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "metabase.fullname" . }}-setup-database
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "metabase.labels" . | nindent 4 }}
    app.kubernetes.io/component: setup
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "metabase.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: setup
    spec:
      serviceAccountName: {{ include "metabase.serviceAccountName" . }}
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-metabase
        image: busybox:1.35
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until wget -q --spider {{ include "metabase.fullname" . }}:3000/api/health 2>/dev/null || nc -z {{ include "metabase.fullname" . }} 3000 2>/dev/null; do echo waiting for metabase; sleep 2; done;']
        resources:
          limits:
            memory: 64Mi
            cpu: 100m
          requests:
            memory: 32Mi
            cpu: 50m
      containers:
      - name: setup-database
        image: curlimages/curl:latest
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - |
          #!/bin/sh
          set -e
          
          METABASE_URL="http://{{ include "metabase.fullname" . }}:3000"
          
          echo "Starting Metabase setup..."
          
          # Wait for Metabase to be ready
          echo "Waiting for Metabase to be ready..."
          for i in 1 2 3 4 5 6 7 8 9 10 11 12; do
            if curl -s "$METABASE_URL/api/health" > /dev/null 2>&1; then
              echo "Metabase is ready!"
              break
            fi
            echo "Waiting for Metabase... ($i/12)"
            sleep 5
            if [ $i -eq 12 ]; then
              echo "Metabase not ready after 60 seconds, proceeding anyway..."
            fi
          done
          
          # Check if user setup is needed
          echo "Checking if user setup is needed..."
          HAS_USER_SETUP=$(curl -s "$METABASE_URL/api/session/properties" | grep -o '"has-user-setup":[^,]*' | cut -d':' -f2 | tr -d ' ')
          
          if [ "$HAS_USER_SETUP" = "false" ]; then
            echo "Creating admin user..."
            
            # Get setup token
            SETUP_TOKEN=$(curl -s "$METABASE_URL/api/session/properties" | grep -o '"setup-token":"[^"]*"' | cut -d'"' -f4)
            
            if [ -z "$SETUP_TOKEN" ]; then
              echo "Failed to get setup token"
              exit 1
            fi
            
            # Create admin user
            ADMIN_RESPONSE=$(curl -s -X POST "$METABASE_URL/api/setup" \
              -H "Content-Type: application/json" \
              -d "{
                \"token\": \"$SETUP_TOKEN\",
                \"user\": {
                  \"first_name\": \"Admin\",
                  \"last_name\": \"User\",
                  \"email\": \"admin@nasa-data-hub.com\",
                  \"password\": \"NasaDataHub2024!\"
                },
                \"prefs\": {
                  \"site_name\": \"NASA Data Hub\",
                  \"site_locale\": \"en\"
                }
              }")
            
            if echo "$ADMIN_RESPONSE" | grep -q '"id"'; then
              echo "Admin user created successfully!"
            else
              echo "Failed to create admin user: $ADMIN_RESPONSE"
              exit 1
            fi
          else
            echo "User already setup, skipping user creation"
          fi
          
          # Get session token for database setup
          echo "Getting session token..."
          SESSION_RESPONSE=$(curl -s -X POST "$METABASE_URL/api/session" \
            -H "Content-Type: application/json" \
            -d "{
              \"username\": \"admin@nasa-data-hub.com\",
              \"password\": \"NasaDataHub2024!\"
            }")
          
          SESSION_TOKEN=$(echo "$SESSION_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
          
          if [ -z "$SESSION_TOKEN" ]; then
            echo "Failed to get session token: $SESSION_RESPONSE"
            exit 1
          fi
          
          echo "Session token obtained successfully!"
          
          # Add Vertica database
          echo "Adding Vertica database..."
          VERTICA_RESPONSE=$(curl -s -X POST "$METABASE_URL/api/database" \
            -H "Content-Type: application/json" \
            -H "X-Metabase-Session: $SESSION_TOKEN" \
            -d "{
              \"name\": \"NASA Data Hub Vertica\",
              \"engine\": \"vertica\",
              \"details\": {
                \"host\": \"{{ .Values.vertica.host }}\",
                \"port\": {{ .Values.vertica.port }},
                \"dbname\": \"{{ .Values.vertica.database }}\",
                \"user\": \"{{ .Values.vertica.username }}\",
                \"password\": \"{{ .Values.vertica.password }}\",
                \"ssl\": false
              }
            }")
          
          if echo "$VERTICA_RESPONSE" | grep -q '"id"'; then
            echo "Vertica database added successfully!"
          else
            echo "Failed to add Vertica database: $VERTICA_RESPONSE"
            exit 1
          fi
          
          echo "Metabase setup completed successfully!"
          echo "You can now login with:"
          echo "  Email: admin@nasa-data-hub.com"
          echo "  Password: NasaDataHub2024!"
        resources:
          limits:
            memory: 128Mi
            cpu: 200m
          requests:
            memory: 64Mi
            cpu: 100m
  backoffLimit: 3
