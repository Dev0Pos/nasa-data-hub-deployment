apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "metabase.deploymentName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "metabase.labels" . | nindent 4 }}
    app.kubernetes.io/component: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "metabase.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: visualization
  template:
    metadata:
      labels:
        {{- include "metabase.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: visualization
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "metabase.serviceAccountName" . }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: wait-for-vertica
        image: busybox:1.35
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until wget -q --spider {{ .Values.config.verticaHost }}:{{ .Values.config.verticaPort }} 2>/dev/null || nc -z {{ .Values.config.verticaHost }} {{ .Values.config.verticaPort }} 2>/dev/null; do echo waiting for vertica; sleep 2; done;']
        resources:
          limits:
            memory: 64Mi
            cpu: 100m
          requests:
            memory: 32Mi
            cpu: 50m
      - name: download-jdbc-driver
        image: curlimages/curl:latest
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'curl -L -o /plugins/vertica-jdbc-24.2.0-1.jar https://www.vertica.com/client_drivers/24.2.x/24.2.0-1/vertica-jdbc-24.2.0-1.jar']
        volumeMounts:
        - name: jdbc-drivers
          mountPath: /plugins
        resources:
          limits:
            memory: 128Mi
            cpu: 200m
          requests:
            memory: 64Mi
            cpu: 100m

      containers:
      - name: metabase
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: MB_ENCRYPTION_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "metabase.secretName" . }}
              key: encryption-secret-key
        - name: MB_DB_TYPE
          value: {{ .Values.config.databaseType | quote }}
        - name: MB_PLUGINS_DIR
          value: "/plugins"
        {{- if .Values.config.databaseHost }}
        - name: MB_DB_HOST
          value: {{ .Values.config.databaseHost | quote }}
        {{- end }}
        {{- if .Values.config.databasePort }}
        - name: MB_DB_PORT
          value: {{ .Values.config.databasePort | quote }}
        {{- end }}
        {{- if .Values.config.databaseName }}
        - name: MB_DB_DBNAME
          value: {{ .Values.config.databaseName | quote }}
        {{- end }}
        {{- if .Values.config.databaseUser }}
        - name: MB_DB_USER
          value: {{ .Values.config.databaseUser | quote }}
        {{- end }}
        {{- if .Values.config.databasePassword }}
        - name: MB_DB_PASS
          valueFrom:
            secretKeyRef:
              name: {{ include "metabase.secretName" . }}
              key: database-password
        {{- end }}

        {{- with .Values.env }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        {{- with .Values.containerSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: jdbc-drivers
          mountPath: /plugins
        - name: metabase-data
          mountPath: /metabase.db
        {{- with .Values.volumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
      - name: jdbc-drivers
        emptyDir: {}
      - name: metabase-data
        persistentVolumeClaim:
          claimName: {{ include "metabase.fullname" . }}-data
      {{- with .Values.volumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
